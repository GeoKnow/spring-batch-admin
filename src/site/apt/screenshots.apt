  ------
  Spring Batch Admin Screenshots
  ------
  Dave Syer
  ------
  November 2009
  
{Main Use Cases}
  
%{toc}
  
  The easiest way to get a quick overview of Spring Batch Admin is to 
  see some screenshots of the main use cases.The user interface is a
  web application (built with Spring MVC).

* {Inspect Jobs}

[images/jobs-view.jpg]Jobs View

  The user can inspect the jobs that are known to the system.  
  Jobs are either launchable or non-launchable (in the screenshot they
  are all launchable).  The distinction is that a launchable job is
  defined and configured in the application itself, whereas a non-launchable
  job is detected as state left by the execution of a job in another 
  process.  (Spring Batch uses a relational database to track the state
  of jobs and steps, so historic executions can be queried to show the
  non-launchable jobs.)
  
* {Launch Job}

[images/launch-job-view.jpg]Launch Job View

  Launchable jobs can be launched from the user interface
  with job parameters provided as name value pairs, or by an incrementer
  configured into the application.

* {Inspect Executions}

[images/job-executions-view.jpg]Job Executions View

  Once a job is executing, or has executed, this view can be used to
  see the most recent executions, and a brief summary of their status
  (STARTED, COMPLETED, FAILED, etc.).

[images/job-execution-view.jpg]Job Execution View

  Each individual execution has a more detailed view (shown above),
  and from there the user can click down to a view of each of the 
  step executions in the job (only one in this case).  A common
  reason for wanting to do this is to see the cause of a failure.

[images/step-execution-top-view.jpg]Step Execution (Top) View

  The top of the step execution detail view shows the history of
  the execution of this step across all job executions.  This is 
  useful for getting a statistical feel for performance characteristics.
  A developer running a job in an integration test environment might 
  use the statistics here to compare different parameterisations of 
  a job, to see what effect is of changing (for instance) the 
  commit interval in an item processing step.

[images/step-execution-bottom-view.jpg]Step Execution (Bottom) View

  The bottom of the step execution view has the detailed meta-data
  for the step (status, read count, write count, commit count, etc.)
  as well as an extract of the stack trace from any exception that 
  caused a failure of the step (as in the example shown above).

* {Stop an Execution}
  
[images/stop-job-execution-view.jpg]Stop Job Execution View

  A job that is executing can be stopped by the user (whether or
  not it is launchable).  The stop signal is sent via the database
  and once detected by Spring Batch in whatever process is running 
  the job, the job is stopped (status moves from STOPPING to STOPPED)
  and no further processing takes place.

  